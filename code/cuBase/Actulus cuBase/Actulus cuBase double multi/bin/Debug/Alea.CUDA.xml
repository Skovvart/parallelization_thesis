<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Alea.CUDA</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Builders">
<summary>
 Various IR object builders.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInterop">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.CUDAInteropEx">
<summary>
 Extra functions for CUDA interop.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.SymbolTable`1">
<summary>
 Symbol table used in builder.
</summary>
</member>
<member name="T:Alea.CUDA.Common.SharedMemConfig.EightBytesBank">
<summary>
 Set shared memory bank width to eight bytes.
</summary>
</member>
<member name="T:Alea.CUDA.Common.SharedMemConfig.FourBytesBank">
<summary>
 Set shared memory bank width to four bytes. 
</summary>
</member>
<member name="T:Alea.CUDA.Common.SharedMemConfig.Default">
<summary>
 Set default shared memory bank size.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.SharedMemConfig">
<summary>
 Shared memory configuration.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CacheConfig.PreferEqual">
<summary>
 Prefer equal sized L1 cache and shared memory.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CacheConfig.PreferL1">
<summary>
 Prefer larger L1 cache and smaller shared memory.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CacheConfig.PreferShared">
<summary>
 Prefer larger shared memory and smaller L1 cache.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CacheConfig.Default">
<summary>
 No preference for shared memory or L1.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.CacheConfig">
<summary>
 Cache configuration.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.JITOptions">
<summary>
 Loading options.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.LinkOptions">
<summary>
 Linking options.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:Alea.CUDA.Common.CompileOptions.ModuleName">
<summary>
 The module name. If a module is used as library, it _must_ be assigned with a module name.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.CompileOptions">
<summary>
 Compiling options.
</summary>
</member>
<member name="T:Alea.CUDA.Common.JITCacheMode.CA">
<summary>
 Compile with L1 cache enabled.
</summary>
</member>
<member name="T:Alea.CUDA.Common.JITCacheMode.CG">
<summary>
 Compile with L1 cache disabled.
</summary>
</member>
<member name="T:Alea.CUDA.Common.JITCacheMode">
<summary>
 CUDA JIT compiling cache mode.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.LinkageOpt">
<summary>
 Linkage optimization configuration.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.DeviceArch">
<summary>
 Device&apos;s arch, or say compute capability.
</summary>
</member>
<member name="T:Alea.CUDA.Common.LinkError.Exception">
<summary>
 General error reported by general exception.
</summary>
</member>
<member name="T:Alea.CUDA.Common.LinkError.Error">
<summary>
 Error with NVVM result and message and log
</summary>
</member>
<member name="T:Alea.CUDA.Common.LinkError">
<summary>
 Linking error union.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.LinkWarning">
<summary>
 Linking warning union.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CompileError.Exception">
<summary>
 General error reported by exception.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CompileError.InvalidFunctionExpression">
<summary>
 Invalide function expression, with the reason.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CompileError.UnsupportedPropertySet">
<summary>
 Unsupported property set expression, with the property info and diagnostic messages.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CompileError.UnsupportedPropertyGet">
<summary>
 Unsupported property get expression, with the property info and diagnostic messages.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CompileError.UnsupportedNewObject">
<summary>
 Unsupported new object expression, with the constructor info and diagnostic messages.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CompileError.UnsupportedCall">
<summary>
 Unsupported call expression, with the method info and diagnostic messages.
</summary>
</member>
<member name="T:Alea.CUDA.Common.CompileError.UnsupportedExpression">
<summary>
 Unsupported quotation expression, with the expression object attached.
</summary>
</member>
<member name="P:Alea.CUDA.Common.CompileError.Diagnostics">
<summary>
 Diagnostic message in string.
</summary>
</member>
<member name="P:Alea.CUDA.Common.CompileError.Detail">
<summary>
 Detail error message in string.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.CompileError">
<summary>
 Compiling error unions.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.CompileWarning">
<summary>
 Compiling warning unions.
</summary>
</member>
<member name="T:Alea.CUDA.Common.SourceLocation.Quotation">
<summary>
 Source location by quotation location.
</summary>
</member>
<member name="T:Alea.CUDA.Common.SourceLocation.Description">
<summary>
 Source location by description.
</summary>
</member>
<member name="T:Alea.CUDA.Common.SourceLocation.NotAvailable">
<summary>
 Source location is not available.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.SourceLocation">
<summary>
 Source location.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Common.QuotationSourceLocation.TryGet(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Try to get the source location from an expression.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.QuotationSourceLocation">
<summary>
 Quotation source location.
</summary>
</member>
<member name="T:Alea.CUDA.Common.FloatingPointKind.Double">
<summary>
 Double precision floating point number.
</summary>
</member>
<member name="T:Alea.CUDA.Common.FloatingPointKind.Single">
<summary>
 Single precision floating point number.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.FloatingPointKind">
<summary>
 Floating point number kind. Single or double.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Common.TypeQualifier.Volatile">
<summary>
 Create volatile qualifier.
</summary>
</member>
<member name="P:Alea.CUDA.Common.TypeQualifier.Mutable">
<summary>
 Create mutable qualifier.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Common.TypeQualifier.Const">
<summary>
 Create const qualifier.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.TypeQualifier">
<summary>
 Type qualifier.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSpace.Local">
<summary>
 Local space.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSpace.Constant">
<summary>
 Constant space.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSpace.Shared">
<summary>
 Shared space.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSpace.Global">
<summary>
 Global space.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSpace.Generic">
<summary>
 Generic space.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSpace.Code">
<summary>
 Code space.
</summary>
</member>
<member name="P:Alea.CUDA.Common.AddressSpace.UInt">
<summary>
 The NVVM unsigned integer number for this address space.
</summary>
</member>
<member name="P:Alea.CUDA.Common.AddressSpace.Int">
<summary>
 The NVVM integer number for this address space.
</summary>
</member>
<member name="P:Alea.CUDA.Common.AddressSpace.Description">
<summary>
 Description of this address space.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Common.AddressSpace.OfUInt32(System.UInt32)">
<summary>
 Convert an unsigned integer to address space.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSpace">
<summary>
 CUDA address space.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSize.Address64">
<summary>
 64bit.
</summary>
</member>
<member name="T:Alea.CUDA.Common.AddressSize.Address32">
<summary>
 32bit.
</summary>
</member>
<member name="P:Alea.CUDA.Common.AddressSize.Size">
<summary>
 Size in bytes.
</summary>
</member>
<member name="P:Alea.CUDA.Common.AddressSize.Current">
<summary>
 Address size of current process.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.AddressSize">
<summary>
 Address size. 32bit or 64bit.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.Array2DStorageOrder">
<summary>
 2D array storage order.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.DisposableObject">
<summary>
 A base type for managing `IDisposable` objects.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.PackedAttribute">
<summary>
 Attribute for packed struct.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.AlignAttribute">
<summary>
 Attribute for specified alignment.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.UnionAttribute">
<summary>
 Attribute for union.
</summary>
</member>
<member name="M:Alea.CUDA.Common.compilefailwith``1(Alea.CUDA.Common.CompileError)">
<summary>
 Report compiling error and stop the compiling.
</summary>
</member>
<member name="M:Alea.CUDA.Common.|Const|Mutable|Volatile|(Alea.CUDA.Common.TypeQualifier)">
<summary>
 Active pattern for qualifier.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Common.CompileErrorException">
<summary>
 exception used to report compiling error.
</summary>
</member>
<member name="T:Alea.CUDA.Common">
<summary>
 Common types.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.UpdateOptions(Microsoft.FSharp.Core.FSharpFunc{Alea.CUDA.Common.CompileOptions,Alea.CUDA.Common.CompileOptions})">
<summary>
 A workflow statement to modify the compiling options inside `cuda` workflow.
 (NOTICE: this __MUST__ be the first statement in the workflow, and you __CANNOT__
 change the module name within the compiling options.)
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Link``1(Alea.CUDA.Compilation.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule},Alea.CUDA.Common.LinkOptions)">
<summary>
 Link `IRModule` with libraries and specified linking options.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Link``1(Alea.CUDA.Compilation.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule},Alea.CUDA.Common.DeviceArch)">
<summary>
 Link `IRModule` with libraries and specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Link``1(Alea.CUDA.Compilation.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule})">
<summary>
 Link `IRModule` with libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Link``1(Alea.CUDA.Compilation.IRModule{``0},Alea.CUDA.Common.LinkOptions)">
<summary>
 Link `IRModule` with specified linking options.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Link``1(Alea.CUDA.Compilation.IRModule{``0},Alea.CUDA.Common.DeviceArch)">
<summary>
 Link `IRModule` with specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Link``1(Alea.CUDA.Compilation.IRModule{``0})">
<summary>
 Link `IRModule` with linking options generated from compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.DefineNonInlineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement to define a non-inline device function.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.DefineKernel``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement to define a kernel function.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.DefineInlineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement to define an inline device function.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.DefineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A workflow statement to define a device function.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.DefineConstantVariable``1">
<summary>
 A workflow statement to define a constant variable.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.DefineConstantVariable``1(``0)">
<summary>
 A workflow statement to define a constant variable resource with initial value.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.DefineConstantArray``1(System.Int32)">
<summary>
 A workflow statement to define a constant array.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Compile``1(Alea.CUDA.Compilation.Template{``0},Alea.CUDA.Common.CompileOptions)">
<summary>
 Compile template with specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Compiler.Compile``1(Alea.CUDA.Compilation.Template{``0})">
<summary>
 Compile template with default options for release.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.Compiler">
<summary>
 A type providing compiling and linking service via its static methods.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.LinkResult`1.Failure">
<summary>
 Linking is failed, with the linking error.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.LinkResult`1.Success">
<summary>
 Linking is succeeded, with `PTXModule&lt;&apos;T&gt;` and optionally some logs.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.LinkResult`1.Succeeded">
<summary>
 Indicate if the linking is succeeded.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.LinkResult`1.PTXModule">
<summary>
 If linking is succeeded, you can get `PTXModule&lt;&apos;T&gt;` from this property.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.LinkResult`1.Log">
<summary>
 Get any log for this linking.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.LinkResult`1.HasLog">
<summary>
 Does the linking generate some log?
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.LinkResult`1.HasError">
<summary>
 Does the linking generate error?
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.LinkResult`1.Failed">
<summary>
 Indicate if the linking is failed.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.LinkResult`1.Error">
<summary>
 If linking is failed, you can get the error with this property.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.LinkResult`1">
<summary>
 Linking result of `IRModule&lt;&apos;T&gt;`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CompileResult`1.Failure">
<summary>
 Compiling is failed, whitch the source location, and compile error.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CompileResult`1.Success">
<summary>
 Compiling is succeeded, with output `IRModule&lt;&apos;T&gt;` and optional warnings (and their source locations).
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.Warnings">
<summary>
 Get the warnings of compiling.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.Succeeded">
<summary>
 Indicate the compiling is succeeded.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.IRModule">
<summary>
 If compiling is succeeded, then you can get the `IRModule` from this property.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.HasWarning">
<summary>
 Does the compiling have warnings?
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.HasError">
<summary>
 Does the compiling have error?
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.Failed">
<summary>
 Indicate the compiling is failed.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.Exception">
<summary>
 Internally, compiling error are reported by exception, you can get this exception
 by this property.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.CompileResult`1.Error">
<summary>
 If compiling failed, then you can get the error of type `SourceLocation * CompileError`.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.CompileResult`1">
<summary>
 Compiling result of a `Template&lt;&apos;T&gt;`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compilation.BuilderRegistry.Instance">
<summary>
 Get the instance of the registry.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.BuilderRegistry.Reset(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.CustomBuilder})">
<summary>
 Reset all pre-defined builders, then register custom builders.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.BuilderRegistry.Reset">
<summary>
 Reset all pre-defined builders.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.BuilderRegistry.Ping">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.BuilderRegistry">
<summary>
 Builder registry, which can be used to register new builders.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomFromUnmanagedMarshaler">
<summary>
 Custom from unmanaged marshaler by a `Type` as key and a `ICustomFromUnmanagedMarshaler`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomToUnmanagedMarshaler">
<summary>
 Custom to unmanaged marshaler by a `Type` as key and a `ICustomToUnmanagedMarshaler`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomNewObjectBuilder">
<summary>
 Custom new object expression builder by a `ConstructorInfo` as key and a `ICustomNewObjectBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomPropertySetBuilder">
<summary>
 Custom property set expression builder by a `PropertyInfo` as key and a `ICustomPropertySetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomPropertyGetBuilder">
<summary>
 Custom property get expression builder by a `PropertyInfo` as key and a `ICustomPropertyGetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomFieldSetBuilder">
<summary>
 Custom field set expression builder by a `FieldInfo` as key and a `ICustomFieldSetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomFieldGetBuilder">
<summary>
 Custom field get expression builder by a `FieldInfo` as key and a `ICustomFieldGetBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomCallBuilder">
<summary>
 Custom call expression builder by a `MethodInfo` as key and a `ICustomCallBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomConstantBuilder">
<summary>
 Custom constant expression builder by a `Type` as key and a `ICustomConstantBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder.CustomTypeBuilder">
<summary>
 Custom type builder by a `Type` as key and a `ICustomTypeBuilder`.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.CustomBuilder">
<summary>
 A union for different custom builders, that is used to register custom builders.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.TemplateBuilder">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.Template`1.Template">
<summary>
 A resource generating function, which takes module building context from compiler,
 then generate the resource.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.Template`1.Invoke(Alea.CUDA.Contexts.IRModuleBuildingContext)">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.Template`1">
<summary>
 Template represents a resource `&apos;T` defined in the module.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.PTXModuleBuilder">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.Compilation.PTXModuleBuildingMessage">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.PTXModuleBuildingResult">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compilation.PTXModule`1.Entry">
<summary>
 The entry point.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.PTXModule`1">
<summary>
 Typed PTXModule which is inherited from untyped `PTXModule`. The `&apos;T` is the entry point of this module.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compilation.PTXModule.LinkOptions">
<summary>
 The linking options that is used to generate this `PTXModule`.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compilation.PTXModule.CompileOptions">
<summary>
 The compiling options that is used to generate this `PTXModule`.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.PTXModule.Bitcode">
<summary>
 The bitcode of this `PTXModule`.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.PTXModule.Dump">
<summary>
 Dump this `PTXModule`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.PTXModule">
<summary>
 Untyped PTXModule.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compilation.IRModule`1.Entry">
<summary>
 The entry point.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.IRModule`1">
<summary>
 Typed IRModule which is inherited from untyped `IRModule`. The `&apos;T` is the entry point of this module.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compilation.IRModule.CompileOptions">
<summary>
 The compiling options that is used to generate this `IRModule`.
</summary>
</member>
<member name="P:Alea.CUDA.Compilation.IRModule.Bitcode">
<summary>
 The bitcode of this `IRModule`.
</summary>
</member>
<member name="M:Alea.CUDA.Compilation.IRModule.Dump">
<summary>
 Dump this `IRModule`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Compilation.IRModule">
<summary>
 Untyped IRModule.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Compilation.cuda">
<summary>
 The template workflow, used to build resources.
</summary>
</member>
<member name="T:Alea.CUDA.Compilation">
<summary>
 Compiling service which provides types such as `Template`, `IRModule`, and `PTXModule`.
 A `cuda` workflow builder is provided here to compose `Template`.
 A `Compiler` type is provided to define kernel compile time resources,
 and compiling and linking features.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Constructs">
<summary>
 Modeling of IR objects. Main category under this module are `IRType` and `IRValue`.
 These types are used for extending Alea.cuBase kernel language.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Contexts">
<summary>
 Contexts for building IRModule.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Worker.Thread">
<summary>
 Returns the underlying worker thread. A worker thread is
 a thread and a CUDA context that bind on it.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Worker.Device">
<summary>
 Return the underlying device of this worker.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Worker.Default">
<summary>
 The default worker, which is created from Device.Devices.[0].
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Engine.Worker.Synchronize">
<summary>
 Synchronize the underlying thread (on its CUDA context).
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.Scatter``1(``0[],Alea.CUDA.Primitive.deviceptr{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Scatter a host array into a device memory pointed by a device pointer.
 You can optionally specify the offset and length of the host array.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.ResetDefault">
<summary>
 Destroy the default worker.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.ProfilerStop">
<summary>
 Define the end of profiling region for Visual Profiler.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.ProfilerStart">
<summary>
 Define the beginning of profiling region for Visual Profiler.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.Malloc``1(``0[])">
<summary>
 Allocate device memory and then scatter host array to it.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.Malloc``1(System.Int32)">
<summary>
 Allocate device memory of required space.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}},Alea.CUDA.Common.CompileOptions,Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule})">
<summary>
 Load a disposable program from template and libraries with specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule})">
<summary>
 Load a disposable program from template and libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}},Alea.CUDA.Common.CompileOptions)">
<summary>
 Load a disposable program from template with specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}})">
<summary>
 Load a disposable program from template.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.IRModule{Alea.CUDA.Engine.Entry{``0}},Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule})">
<summary>
 Load a disposable program from IR module and libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.IRModule{Alea.CUDA.Engine.Entry{``0}})">
<summary>
 Load a disposable program from IR module.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.PTXModule{Alea.CUDA.Engine.Entry{``0}})">
<summary>
 Load a disposable program from PTX module.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.LoadProgram``1(Alea.CUDA.Compilation.PTXModule{Alea.CUDA.Engine.Entry{``0}},Alea.CUDA.Common.JITOptions)">
<summary>
 Load a disposable program from PTX module with specified JIT compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.Gather``1(Alea.CUDA.Primitive.deviceptr{``0},``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Gather a device memory pointed by a device pointer into a host array.
 You can optionally specify the offset and length of the host array.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.Eval``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Evaluate a value using worker thread.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Engine.Worker.CreateStream(Microsoft.FSharp.Core.FSharpOption{System.UInt32})">
<summary>
 Create disposable stream object.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.CreateEvent(Microsoft.FSharp.Core.FSharpOption{System.UInt32})">
<summary>
 Create disposable event object.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.Create(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Tuple{Alea.CUDA.Engine.Device,System.IntPtr}})">
<summary>
 Create a worker by given a device and CUDA context generating function.
 For example, when you are creating a worker which is of Direct3D
 interop capability, you should use special API to create the context.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Worker.Create(Alea.CUDA.Engine.Device)">
<summary>
 Create a worker by given a device.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Worker">
<summary>
 A worker combines together a device and a worker thread, provides services to create CUDA runtime objects
 and to load a `PTXModule` into `Program`. This type implemented `IDisposable` interface.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.DeviceMemory`1.Ptr">
<summary>
 Get the `deviceptr&lt;&apos;T&gt;` of this memory
</summary>
</member>
<member name="P:Alea.CUDA.Engine.DeviceMemory`1.Length">
<summary>
 Numbers of elements.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.DeviceMemory`1.Scatter(`0[])">
<summary>
 Scatter host data to device.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.DeviceMemory`1.Gather">
<summary>
 Gather data from device to host.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.DeviceMemory`1">
<summary>
 Typed device memory, inherited from untyped `DeviceMemory`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.DeviceMemory.Worker">
<summary>
 Reflected worker.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.DeviceMemory.Thread">
<summary>
 Reflected worker thread.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.DeviceMemory.Size">
<summary>
 Allocated memory size in bytes.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.DeviceMemory.Handle">
<summary>
 The `CUdeviceptr` handle of this memory.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.DeviceMemory">
<summary>
 A wrapper over CUDA device memory pointer. Represent a device memory allocation. This type
 implemented `IDisposable` interface. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Program`1.Run">
<summary>
 This is the entry point of your program.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Program`1">
<summary>
 The entry pointer will send the compiled untyped program object to run.
 Typed runtime program, inherited from untyped `Program`.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Entry`1">
<summary>
 A host resource for template. A template _must_ return this kind of host resource to make it be able
 to be loaded into a program.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Program.Worker">
<summary>
 Reflected worker.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Program.Thread">
<summary>
 Reflected worker thread.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Program.Handle">
<summary>
 CUDA native handle of this program.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Engine.Program.Apply``1(Alea.CUDA.Resources.GlobalVariable{``0})">
<summary>
 Apply this program to a compile time global variable resource to get the global variable runtime.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Program.Apply``1(Alea.CUDA.Resources.GlobalArray{``0})">
<summary>
 Apply this program to a compile time global array resource to get the global array runtime.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Program.Apply``1(Alea.CUDA.Resources.Kernel{``0})">
<summary>
 Apply this program to a compile time kernel resource to get the kernel runtime.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Program">
<summary>
 Untyped program runtime. A program is a runtime representation of `PTXModule`, it holds all
 runtime resources, and implemented `IDisposable` interface.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Engine.Kernel`1.cuLaunch(Alea.CUDA.Engine.LaunchParam)">
<summary>
 Launch this kernel but not check if it is in worker thread.
 You _must_ make sure this function is called inside the worker thread by using `WorkerThread.Eval` or `Worker.Eval`.
 This function is for gaining higher launching performance because it will not check if the thread is correct worker thead.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Kernel`1.Launch(Alea.CUDA.Engine.LaunchParam)">
<summary>
 Launch this kernel.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Kernel`1">
<summary>
 Typed runtime kernel function. Inherited from untyped runtime kernel function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Kernel.SharedMemConfig(Alea.CUDA.Common.SharedMemConfig)">
<summary>
 Set the shared memory configuration of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Kernel.CacheConfig(Alea.CUDA.Common.CacheConfig)">
<summary>
 Set the cache configuration of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Kernel.Thread">
<summary>
 The thread who created this kernel function.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Kernel.SharedMemConfig">
<summary>
 Get the shared memory configuration of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Kernel.Resource">
<summary>
 The kernel compile time resource of this kernel function.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Kernel.Program">
<summary>
 The program who created this kernel function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Kernel.Handle">
<summary>
 CUDA native handle of this kernel function.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Kernel.CacheConfig">
<summary>
 Get the cache configuration of this kernel function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Kernel">
<summary>
 Untyped kernel function runtime resource. This type implemented `IDisposable` interfance.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.LaunchParam.StreamHandle">
<summary>
 CUDA native handle of the stream, `0n` represents default stream.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.LaunchParam.Stream">
<summary>
 On which stream the launching will be applied. `None` represents default stream.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.LaunchParam.SharedMemorySize">
<summary>
 Dynamic shared memory size in bytes.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.LaunchParam.IsDefaultStream">
<summary>
 Indicate if it is launched in default stream.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.LaunchParam.GridDim">
<summary>
 Grid dimensions.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.LaunchParam.BlockDim">
<summary>
 Block dimensions.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Engine.LaunchParam.#ctor(System.Int32,System.Int32,System.Int32,Alea.CUDA.Engine.Stream)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory, and a specified stream.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.LaunchParam.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.LaunchParam.#ctor(System.Int32,System.Int32)">
<summary>
 Create launching parameters with only specified grid and block dimensions.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.LaunchParam.#ctor(Alea.CUDA.Primitive.dim3,Alea.CUDA.Primitive.dim3,System.Int32,Alea.CUDA.Engine.Stream)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory, and a specified stream.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.LaunchParam.#ctor(Alea.CUDA.Primitive.dim3,Alea.CUDA.Primitive.dim3,System.Int32)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.LaunchParam.#ctor(Alea.CUDA.Primitive.dim3,Alea.CUDA.Primitive.dim3)">
<summary>
 Create launching parameters with only specified grid and block dimensions.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.LaunchParam">
<summary>
 Kernel launching parameters.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.GlobalVariable`1.Ptr">
<summary>
 The device pointer of this global variable.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.GlobalVariable`1.Scatter(`0)">
<summary>
 Scatter host data into this global variable.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.GlobalVariable`1">
<summary>
 Typed runtime resource of global variable. Inherited from untyped `GlobalVariable`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.GlobalVariable.Thread">
<summary>
 The worker thread which created this global variable.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.GlobalVariable.Program">
<summary>
 The program which created this global variable.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.GlobalVariable.Handle">
<summary>
 The CUDA native handle of this global variable.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.GlobalVariable">
<summary>
 Untyped runtime resource of global variable. Also called _symbol_ in CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.GlobalArray`1.Ptr">
<summary>
 The device pointer of this global array.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.GlobalArray`1.Scatter(`0[])">
<summary>
 Scatter host data into this global array.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.GlobalArray`1.Gather">
<summary>
 Gather data to host from this global array.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.GlobalArray`1">
<summary>
 Typed runtime resource of global array. Inherited from untyped `GLobalArray`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.GlobalArray.Thread">
<summary>
 The worker thread which created this global array.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.GlobalArray.Program">
<summary>
 The program which created this global array.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.GlobalArray.Handle">
<summary>
 The CUDA native handle of this global array.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.GlobalArray">
<summary>
 Untyped runtime resource of global array. Also called _symbol_ in CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Event.Worker">
<summary>
 The worker who created this event.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Event.Thread">
<summary>
 The worker thread who created this event.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Event.Handle">
<summary>
 CUDA native handle of this event.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Event.Synchronize">
<summary>
 Synchronize event.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Event.Record(Microsoft.FSharp.Core.FSharpOption{Alea.CUDA.Engine.Stream})">
<summary>
 Record event.
</summary>
</member>
<member name="M:Alea.CUDA.Engine.Event.ElapsedMilliseconds(Alea.CUDA.Engine.Event,Alea.CUDA.Engine.Event)">
<summary>
 Get the time in milliseconds of two events.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Event">
<summary>
 A wrapper over CUDA event object. This type implemented `IDisposable` interface.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Stream.Worker">
<summary>
 The worker who created this stream.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Stream.Thread">
<summary>
 The worker thread who created this stream.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Stream.Handle">
<summary>
 CUDA native handle of this stream.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Stream">
<summary>
 A wrapper over CUDA stream object. This type implemented `IDisposable` interface.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.WorkerThread.ThreadID">
<summary>
 Managed thread id of this thread.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.WorkerThread.SynchronizationContext">
<summary>
 A thread synchronization context, work with F# `async` workflow.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.WorkerThread.Name">
<summary>
 Thread name, combines thread id and device name which is used to create the CUDA context.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.WorkerThread.ID">
<summary>
 A GUID of this thread.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.WorkerThread.Device">
<summary>
 The device that is used to create the CUDA context.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.WorkerThread.ContextHandle">
<summary>
 Native handle of CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Engine.WorkerThread.Eval``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Evaluate a value within the worker thread. All raw CUDA API should be called in the worker
 thread where it has CUDA context attached.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.WorkerThread">
<summary>
 A worker thread represents a background thread and a CUDA context attached to that thread.
 The instance of this type will be hold as a member in type `Worker`. To evaluate a value
 in the worker thread, you can use `thread.Eval` function. All raw CUDA API _must_ be evaluated
 in the worker thread, because only there it has CUDA context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Device.TotalMemory">
<summary>
 Total device memory size.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Device.Properties">
<summary>
 Properties of this device.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Device.Name">
<summary>
 The device name.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Device.ID">
<summary>
 The zero-based integer id of this device in the system.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Engine.Device.Attributes">
<summary>
 Attributes of this device.
</summary>
</member>
<member name="P:Alea.CUDA.Engine.Device.Arch">
<summary>
 The device arch (or say compute capability).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.Device">
<summary>
 Represent a CUDA device.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.DeviceAttributes">
<summary>
 Device attributes.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.DeviceProperties">
<summary>
 Device properties.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Engine.MemoryUtil">

</member>
<member name="T:Alea.CUDA.Engine">
<summary>
 CUDA runtime.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Interop">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.IntrinsicFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ObjReinterpretFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ObjVolatileFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ArrayReinterpretFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ArrayVolatileFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.PtrToObjFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ObjToPtrFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.RefToPtrFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.ArrayToPtrFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.UnboxFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.BoxFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.NullFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.AlignOfFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.SizeOfFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Intrinsic.DebugFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__threadfence_system">
<summary>
 Memory fence function. For more detail please reference [CUDA C Programming Guide](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__threadfence">
<summary>
 Memory fence function. For more detail please reference [CUDA C Programming Guide](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__threadfence_block">
<summary>
 Memory fence function. For more detail please reference [CUDA C Programming Guide](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions).
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads_or(System.Int32)">
<summary>
 Identical to `__syncthreads()` with the additional feature that it evaluates predicate for all
 threads of the block and returns non-zero if and only if predicate evaluates to non-zero for any of them.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads_and(System.Int32)">
<summary>
 Identical to `__syncthreads()` with the additional feature that it evaluates predicate for all
 threads of the block and returns non-zero if and only if predicate evaluates to non-zero for all of them.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads_count(System.Int32)">
<summary>
 Identical to `__syncthreads()` with the additional feature that it evaluates predicate for all
 threads of the block and returns the number of threads for which predicate evaluates to non-zero.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__syncthreads">
<summary>
 Wait until all threads in the thread block have reached this pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_reinterpret``2(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
 Reinterpret an F# `Ref&lt;&apos;T&gt;` to `Ref&lt;&apos;U&gt;`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_volatile``1(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
 Make an F# `Ref&lt;&apos;T&gt;` object volatile. F# `Ref&lt;&apos;T&gt;` object represents a pointer in kernel quotation.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_reinterpret``2(``0)">
<summary>
 Reinterpret an object of ref type `&apos;T` to another ref type `&apos;U`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_volatile``1(``0)">
<summary>
 Make an object of ref type volatile.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__array_reinterpret``2(``0[])">
<summary>
 Reinterpret a `&apos;T[]` to `&apos;U[]`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__array_volatile``1(``0[])">
<summary>
 Make an array volatile.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_reinterpret``2(Alea.CUDA.Primitive.deviceptr{``0})">
<summary>
 Reinterpret a `deviceptr&lt;&apos;T&gt;` to `deviceptr&lt;&apos;U&gt;`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_volatile``1(Alea.CUDA.Primitive.deviceptr{``0})">
<summary>
 Make a pointer volatile.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_to_ref``1(``0)">
<summary>
 Get the F# `Ref&lt;&apos;T&gt;` object which references the object.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_to_obj``1(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
 Get the object of ref type by giving an F# `Ref&lt;&apos;T&gt;` object which references that object.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_to_obj``1(Alea.CUDA.Primitive.deviceptr{``0})">
<summary>
 Get the object of ref type by giving a pointer pointing to that object.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__obj_to_ptr``1(``0)">
<summary>
 Get the pointer of an object of ref type.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ptr_to_ref``1(Alea.CUDA.Primitive.deviceptr{``0})">
<summary>
 Transform a `deviceptr&lt;&apos;T&gt;` pointer to an F# `Ref&lt;&apos;T&gt;` object. An F# `Ref&lt;&apos;T&gt;`
 object represents a non-indexable pointer in kernel quotation.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__ref_to_ptr``1(Microsoft.FSharp.Core.FSharpRef{``0})">
<summary>
 Transform an F# `Ref&lt;&apos;T&gt;` object to `deviceptr&lt;&apos;T&gt;` pointer. An F# `Ref&lt;&apos;T&gt;`
 object represents a non-indexable pointer in kernel quotation.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__array_to_ptr``1(``0[])">
<summary>
 Get the pointer which points to the first element of an array.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__unbox``1(``0)">
<summary>
 Unbox a value. In kernel quotation, an expression might be an `IRValue`
 or an `IRReferenceValue`, unboxing it makes sure it became `IRValue`.

 A use case is, if you want to make a copy of a ref type object, you can
 simply do:

     let a = SomeRefType()
     let b = a |&gt; __unbox

 In this example, `b` will not be the reference of `a`, it is a new reference
 that has initial value copied from `a`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__box``1(``0)">
<summary>
 Box a value. In kernel quotation, an expression might be an `IRValue`
 or an `IRReferenceValue`, boxing it makes sure it became `IRReferenceValue`.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__null``1">
<summary>
 Return a null pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__alignof``1">
<summary>
 Get alignment of a type.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__sizeof``1">
<summary>
 Get size of a type.
</summary>
</member>
<member name="M:Alea.CUDA.Intrinsic.__debug``1(``0)">
<summary>
 A diagnostic function for an expression in kernel quotation.
 When compiling kernel, the underlying `IRValue` will be printed out.
</summary>
</member>
<member name="T:Alea.CUDA.Intrinsic">
<summary>
 Intrinsic functions for kernel authoring, such as `__syncthreads`, `__sizeof`,
 and various converters.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInterop">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LLVMInteropEx">
<summary>
 Extra functions for LLVM interop.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LibDevice.LibDeviceFunctionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.LibDevice">
<summary>
 Provides basic library for kernel authoring. 
 Reference to [nVidia Libdevice User&apos;s Guide](http://docs.nvidia.com/cuda/libdevice-users-guide/index.html)
 for more detail.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.NVVMInterop">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.NVVMInteropEx">
<summary>
 Extra functions for NVVM interop.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomFromUnmanagedMarshaler">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomToUnmanagedMarshaler">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomPropertyGetBuilders">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomCallBuilders">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomConstantBuilders">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Overrides.CustomTypeBuilders">

</member>
<member name="T:Alea.CUDA.Overrides">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__shared__.Variable``1(``0)">
<summary>
 Define a variable of type `&apos;T` on shared memory with initial value. Return an F# `Ref&lt;&apos;T&gt;` object
 to represent the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__shared__.Variable``1">
<summary>
 Define a variable of type `&apos;T` on shared memory. Return an F# `Ref&lt;&apos;T&gt;` object to represent
 the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__shared__.Extern``1(System.Int32)">
<summary>
 Declare an extern shared memory with specified alignment by returning its pointer. Extern shared memory is dynamically
 allocated when launching the kernel.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__shared__.Extern``1">
<summary>
 Declare an extern shared memory by returning its pointer. Extern shared memory is dynamically
 allocated when launching the kernel.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__shared__.Array2D``1(System.Int32,System.Int32)">
<summary>
 Define a 2D array of type `&apos;T` on shared memory. `rows` and `cols` must be kernel compile time 
 constant. Underyling storage order is row major.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__shared__.Array``1(System.Int32,System.Int32)">
<summary>
 Define an arrya of type `&apos;T` on shared memory with specified alignment. `length` and `alignment`
 must be kernel compile time constant.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__shared__.Array``1(System.Int32)">
<summary>
 Define an array of type `&apos;T` on shared memory. `length` must be kernel compile time constant.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.__shared__">
<summary>
 Shared memory manager.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.SharedVariableCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.SharedExternCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.SharedArray2DCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.SharedArrayCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__local__.Variable``1(``0)">
<summary>
 Define a variable of type `&apos;T` on stack with initial value. Return an F# `Ref&lt;&apos;T&gt;` object
 to represent the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__local__.Variable``1">
<summary>
 Define a variable of type `&apos;T` on stack. Return an F# `Ref&lt;&apos;T&gt;` object to represent
 the variable pointer.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__local__.Array2D``1(System.Int32,System.Int32)">
<summary>
 Define a 2D array of type `&apos;T` on stack. `rows` and `cols` must be kernel compile time 
 constant. Underyling storage order is row major.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__local__.Array``1(System.Int32,System.Int32)">
<summary>
 Define an arrya of type `&apos;T` on stack with specified alignment. `length` and `alignment`
 must be kernel compile time constant.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.__local__.Array``1(System.Int32)">
<summary>
 Define an array of type `&apos;T` on stack. `length` must be kernel compile time constant.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.__local__">
<summary>
 Local memory manager.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.LocalVariableCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.LocalArray2DCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.LocalArrayCreatorAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Primitive.deviceptr`1.Item(System.Int32,`0)">
<summary>
 Set pointee value by advancing pointer of `idx` elements.
 Setting constant memory pointer will cause kernel compile time error.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.deviceptr`1.op_Subtraction(Alea.CUDA.Primitive.deviceptr{`0},Alea.CUDA.Primitive.deviceptr{`0})">
<summary>
 Diff two pointers.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.deviceptr`1.op_Subtraction(Alea.CUDA.Primitive.deviceptr{`0},System.Int32)">
<summary>
 Backward pointer by `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.deviceptr`1.op_Addition(Alea.CUDA.Primitive.deviceptr{`0},System.Int32)">
<summary>
 Advance pointer by `idx` elements.
</summary>
</member>
<member name="P:Alea.CUDA.Primitive.deviceptr`1.Item(System.Int32)">
<summary>
 Get pointee value by advancing pointer of `idx` elements.
</summary>
</member>
<member name="P:Alea.CUDA.Primitive.deviceptr`1.Handle">
<summary>
 The integer value of this pointer. It is of type `nativeint`.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.deviceptr`1.Volatile">
<summary>
 Return a new pointer with same value but qualified as volatile pointer.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Primitive.deviceptr`1.Reinterpret``1">
<summary>
 Reinterpret pointer to another element type `&apos;U`.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.deviceptr`1.Ref(System.Int32)">
<summary>
 Get a F# `Ref&lt;&apos;T&gt;` object by advancing pointer of `idx` elements.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.deviceptr`1.Ptr(System.Int32)">
<summary>
 Advance pointer by `idx` elements.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.deviceptr`1">
<summary>
 Represents a device pointer of type `&apos;T`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.PointerDiffAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.PointerReinterpretAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.PointerVolatileAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.PointerGEPAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.PointerItemAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.PointerHandleAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.PointerAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.SRegTripleAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="F:Alea.CUDA.Primitive.dim3.z">
<summary>
 Dimension `z`.
</summary>
</member>
<member name="F:Alea.CUDA.Primitive.dim3.y">
<summary>
 Dimension `y`.
</summary>
</member>
<member name="F:Alea.CUDA.Primitive.dim3.x">
<summary>
 Dimension `x`.
</summary>
</member>
<member name="P:Alea.CUDA.Primitive.dim3.Size">
<summary>
 A host function for the size of this `dim3` by `x * y * z`.
</summary>
</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Primitive.dim3.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
 Build `dim3(x, y, z)`.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.dim3.#ctor(System.Int32,System.Int32)">
<summary>
 Build `dim3(x, y, 1)`.
</summary>
</member>
<member name="M:Alea.CUDA.Primitive.dim3.#ctor(System.Int32)">
<summary>
 Build `dim3(x, 1, 1)`.
</summary>
</member>
<member name="T:Alea.CUDA.Primitive.dim3">
<summary>
 An integer vector type used to specify dimensions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Primitive.SRegFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.Primitive.gridDim">
<summary>
 Built-in variable of type `dim3` and contains the dimensions of the grid.
</summary>
</member>
<member name="P:Alea.CUDA.Primitive.blockIdx">
<summary>
 Built-in variable of type `dim3` and contains the block index within the grid.
</summary>
</member>
<member name="P:Alea.CUDA.Primitive.blockDim">
<summary>
 Built-in variable of type `dim3` and contains the dimensions of the block.
</summary>
</member>
<member name="P:Alea.CUDA.Primitive.threadIdx">
<summary>
 Built-in variable of type `dim3` and contains the thread index within the block.
</summary>
</member>
<member name="T:Alea.CUDA.Primitive">
<summary>
 Primitives for kernel authoring, such as threading indexing (`threadIdx`, `blockDim`, etc),
 `deviceptr`, and memory allocators.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Resources.Kernel`1.ParamBufferSize">
<summary>
 Unmanaged buffer size for holding the kernel parameters.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.Kernel`1.CULaunch">
<summary>
 A raw kernel launching function, used by runtime kernel resource.
</summary>
</member>
<member name="M:Alea.CUDA.Resources.Kernel`1.PrepareParamPointerBuffer(System.IntPtr)">
<summary>
 Do some initial job for the unmanaged pointer buffer.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.Kernel`1">
<summary>
 Kernel compile time kernel function resource. The function is of type `&apos;T`. It is inherited
 from untyped `Kernel`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Resources.Kernel.SharedMemConfig(Alea.CUDA.Common.SharedMemConfig)">
<summary>
 Set or Get shared memory configuration of this kernel.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.Kernel.CacheConfig(Alea.CUDA.Common.CacheConfig)">
<summary>
 Set or Get GPU cache for this kernel.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.Kernel.SharedMemConfig">
<summary>
 Set or Get shared memory configuration of this kernel.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.Kernel.LambdaType">
<summary>
 The CLR type of this kernel.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.Kernel.CacheConfig">
<summary>
 Set or Get GPU cache for this kernel.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.Kernel">
<summary>
 Untyped kernel compile time kernel function resource. It is inherited form `Resource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.KernelResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.Resources.Function`1.Invoke">
<summary>
 Invoke the device function in kernel quotation.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.Function`1">
<summary>
 Kernel compile time device function resource. The function is of type `&apos;T`. It is inherited
 from untyped `Function`.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Resources.Function.LambdaType">
<summary>
 The CLR type of this function.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.Function">
<summary>
 Untyped kernel compile time device function resource. It is inherited form `Resource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.FunctionResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalArray`1.Item(System.Int32,`0)">
<summary>
 Set array element in kernel quotation. If this global array is in constant
 memory, setting element will cause kernel compile time error.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalArray`1.Ptr">
<summary>
 Get a pointer pointing to the first element of the array.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalArray`1.Item(System.Int32)">
<summary>
 Get array element in kernel quotation.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalArray`1.Array">
<summary>
 Use this property in kernel quotation to get the array.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.GlobalArray`1">
<summary>
 Kernel compile time global array resource of element type `&apos;T`. It is inherited from
 untyped `GlobalArray`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Resources.GlobalArray.Length">
<summary>
 Length of the array.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalArray.ElementType">
<summary>
 The CLR type of the array element.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.GlobalArray">
<summary>
 Untyped kernel compile time global array resource. It is inherited from `Resource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.GlobalArrayResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalVariable`1.Value">
<summary>
 Use this property in kernel quotation to get the value of this variable.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalVariable`1.Ref">
<summary>
 Use this property in kernel quotation to get F# `Ref&lt;&apos;T&gt;` of this variable.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.GlobalVariable`1.Ptr">
<summary>
 Use this property in kernel quotation to get the pointer to this variable.
 If this global variable is in constant memory, writing to this pointer will
 cause kernel compile time error.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.GlobalVariable`1">
<summary>
 Kernel compile time global variable resource of type `&apos;T`. It is inherited from 
 untyped `GlobalVariable`.
</summary>
</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Resources.GlobalVariable.Type">
<summary>
 The CLR type of this variable.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.GlobalVariable">
<summary>
 Untyped kernel compile time global variable resource. It is inherited from `Resource`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.GlobalVariableResourceAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Alea.CUDA.Resources.Resource.Name">
<summary>
 The name of this resource.
</summary>
</member>
<member name="P:Alea.CUDA.Resources.Resource.AddressSpace">
<summary>
 The address space of this resource.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Resources.Resource">
<summary>
 Base type for kernel compile time resources.
</summary>
</member>
<member name="T:Alea.CUDA.Resources">
<summary>
 Kernel compile time resources.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Util.CLRTypeUtil">

</member>
<member name="T:Alea.CUDA.Util">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.AttributeBuilders">
<summary>
 Attribute builders to extend Alea.cuBase for easier use. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Common">
<summary>
 Common utilities.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.loadWithOptionsAndLibraries``1(Alea.CUDA.Common.CompileOptions,Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule},Alea.CUDA.Engine.Worker,Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}})">
<summary>
 Load template with libraries and specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.loadWithLibraries``1(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule},Alea.CUDA.Engine.Worker,Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}})">
<summary>
 Load template with libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.loadWithOptions``1(Alea.CUDA.Common.CompileOptions,Alea.CUDA.Engine.Worker,Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}})">
<summary>
 Load templte with specified compiling options.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.load``1(Alea.CUDA.Engine.Worker,Alea.CUDA.Compilation.Template{Alea.CUDA.Engine.Entry{``0}})">
<summary>
 Load template.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.link``1(Alea.CUDA.Compilation.IRModule{``0})">
<summary>
 Link `IRModule`
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.linkWithArch``1(Alea.CUDA.Common.DeviceArch,Alea.CUDA.Compilation.IRModule{``0})">
<summary>
 Link `IRModule` with specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.linkWithLibraries``1(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule},Alea.CUDA.Compilation.IRModule{``0})">
<summary>
 Link `IRModule` with libraries.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.linkWithLibrariesAndArch``1(Microsoft.FSharp.Collections.FSharpList{Alea.CUDA.Compilation.IRModule},Alea.CUDA.Common.DeviceArch,Alea.CUDA.Compilation.IRModule{``0})">
<summary>
 Link `IRModule` with libraries and specified device arch.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.compile``1(Alea.CUDA.Compilation.Template{``0})">
<summary>
 Compile template.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.Compiler.compileWithOptions``1(Alea.CUDA.Common.CompileOptions,Alea.CUDA.Compilation.Template{``0})">
<summary>
 Compile template with specified compiling options.
</summary>
</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.Compiler">
<summary>
 Helper compiling utilities.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.AsinhHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.AsinhAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.RsqrtHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.RsqrtAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.PowHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.PowAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.SinCosHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.SinCosAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.IsNanHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.IsNanAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.NanHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.NanAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.QuarterHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.QuarterAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.HalfHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.HalfAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.Sqrt2Host">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.Sqrt2Attribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.EulerEHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.EulerEAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.OneOver2To32MinusOneHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.OneOver2To32MinusOneAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.TwoToNeg32Host">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.TwoToNeg32Attribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.Sqrt2PiHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.Sqrt2PiAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.PiHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.PiAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.LowestValHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.LowestValAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.MinValHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.MinValAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.MaxValHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.MaxValAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.EpsilonHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.EpsilonAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.NegInfinityHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.NegInfinityAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.PosInfinityHost">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx.PosInfinityAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDeviceEx.__quarter``1">
<summary>
 0.25
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDeviceEx.__half``1">
<summary>
 0.5
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDeviceEx.__oneover2to32minus1``1">
<summary>
 1 / (2^(-32) - 1)
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.LibDeviceEx.__twotoneg32``1">
<summary>
 2^(-32)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Alea.CUDA.Utilities.LibDeviceEx.__epsilon``1">
<summary>
 Gives the difference between 1.0 and the next-nearest number representable as a machine-precision number. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.LibDeviceEx">
<summary>
 Extending LibDevice with generic.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericLiteralG.GenericNumberFromInt32Attribute">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericLiteralG.GenericNumberFromInt32">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericLiteralG">
<summary>
 F# literal definition for generic number.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.NumericTraits.RealTraits.Real64">
<summary>
 Generate traits for double precision number.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.NumericTraits.RealTraits.Real32">
<summary>
 Generate traits for single precision number.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits.RealTraits">
<summary>
 Factory to generate `RealTraits&lt;&apos;T&gt;`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits.RealTraits`1">
<summary>
 Variaous converters and properties of a real type (`float` or `float32`).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits.RealTraitsAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.NumericTraits">
<summary>
 Numeric traits to help writing generic kernels.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.TestUtil.IRunner`2.Verify">
<summary>
 Verify function, if don&apos;t want to verify, return None.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.TestUtil.IRunner`2.Tests">
<summary>
 Factories to create tests.
</summary>
</member>
<member name="P:Alea.CUDA.Utilities.TestUtil.IRunner`2.Baseline">
<summary>
 Factory to create test for the baseline.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.IRunner`2.Description(`0,System.Int32)">
<summary>
 Give input and iters, return description of this runner.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.TestUtil.IRunner`2">
<summary>
 Test runner interface.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.ITest`2.Run(`0,System.Int32)">
<summary>
 Given input and iters, run the test, return output and performance (in string), or 
 if the input is too large and cannot run the test, return None.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.ITest`2.Name(`0,System.Int32)">
<summary>
 Given input and iters, return a name for this test.
</summary>
</member>
<member name="T:Alea.CUDA.Utilities.TestUtil.ITest`2">
<summary>
 Test interface.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.tictoc``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Measure CPU time.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.splitter``2(System.String,Microsoft.FSharp.Core.Unit)">
<summary>
 A test that used for splitting.
</summary>
</member>
<member name="M:Alea.CUDA.Utilities.TestUtil.run``2(Alea.CUDA.Utilities.TestUtil.IRunner{``0,``1},System.Int32,``0)">
<summary>
 Run a set of tests.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Alea.CUDA.Utilities.TestUtil">
<summary>
 Utilities for testing.
</summary>
</member>
</members>
</doc>
